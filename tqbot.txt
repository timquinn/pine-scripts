//@version=4
//PleaseFuckingWorkBot

//created by: @Anil_Ozeksi
//updated by: Tim Quinn
//developer: ANIL ÖZEKŞİ
//Note: Based off of OptomizedTrendTracker

study("Quinn Bot","TQBot", overlay=true)
src = input(close, title="Source")
length=input(2, "OTT Period", minval=1)
percent=input(1.4, "OTT Percent", type=input.float, step=0.1, minval=0)
showsupport = input(title="Show Support Line?", type=input.bool, defval=true)
showsignalsk = input(title="Show Support Line Crossing Signals?", type=input.bool, defval=true)
showsignalsc = input(title="Show Price/OTT Crossing Signals?", type=input.bool, defval=false)
highlight = input(title="Show OTT Color Changes?", type=input.bool, defval=false)
showsignalsr = input(title="Show OTT Color Change Signals?", type=input.bool, defval=false)
highlighting = input(title="Highlighter On/Off ?", type=input.bool, defval=true)
mav = input(title="Moving Average Type", defval="VAR", options=["SMA", "EMA", "WMA", "TMA", "VAR", "WWMA", "ZLEMA", "TSF"])
Var_Func(src,length)=>
    valpha=2/(length+1)
    vud1=src>src[1] ? src-src[1] : 0
    vdd1=src<src[1] ? src[1]-src : 0
    vUD=sum(vud1,9)
    vDD=sum(vdd1,9)
    vCMO=nz((vUD-vDD)/(vUD+vDD))
    VAR=0.0
    VAR:=nz(valpha*abs(vCMO)*src)+(1-valpha*abs(vCMO))*nz(VAR[1])
VAR=Var_Func(src,length)
Wwma_Func(src,length)=>
    wwalpha = 1/ length
    WWMA = 0.0
    WWMA := wwalpha*src + (1-wwalpha)*nz(WWMA[1])
WWMA=Wwma_Func(src,length)
Zlema_Func(src,length)=>
    zxLag = length/2==round(length/2) ? length/2 : (length - 1) / 2
    zxEMAData = (src + (src - src[zxLag]))
    ZLEMA = ema(zxEMAData, length)
ZLEMA=Zlema_Func(src,length)
Tsf_Func(src,length)=>
    lrc = linreg(src, length, 0)
    lrc1 = linreg(src,length,1)
    lrs = (lrc-lrc1)
    TSF = linreg(src, length, 0)+lrs
TSF=Tsf_Func(src,length)
getMA(src, length) =>
    ma = 0.0
    if mav == "SMA"
        ma := sma(src, length)
        ma

    if mav == "EMA"
        ma := ema(src, length)
        ma

    if mav == "WMA"
        ma := wma(src, length)
        ma

    if mav == "TMA"
        ma := sma(sma(src, ceil(length / 2)), floor(length / 2) + 1)
        ma

    if mav == "VAR"
        ma := VAR
        ma

    if mav == "WWMA"
        ma := WWMA
        ma

    if mav == "ZLEMA"
        ma := ZLEMA
        ma

    if mav == "TSF"
        ma := TSF
        ma
    ma

// TQ: Sideways / Bull / Bear Trend Detector.  Last updated 1/21/2021
lenadx = input(14, minval=1, title="DI Length")
lensig = input(14, title="ADX Smoothing", minval=1, maxval=50)
limadx = input(18, minval=1, title="ADX MA Active")

up = change(high)
down = -change(low)
trur = rma(tr, lenadx)
plus = fixnan(100 * rma(up > down and up > 0 ? up : 0, lenadx) / trur)
minus = fixnan(100 * rma(down > up and down > 0 ? down : 0, lenadx) / trur)
sum = plus + minus
adx = 100 * rma(abs(plus - minus) / (sum == 0 ? 1 : sum), lensig)

macol = adx > limadx and plus > minus ? color.lime : adx > limadx and plus < minus ? color.red : color.black

bullcond= adx > limadx and plus > minus and macol != macol[1]
bearcond= adx > limadx and plus < minus and macol != macol[1]
sidecond= not bullcond and not bearcond and macol != macol[1]


plotshape(bullcond,style=shape.triangleup,color=color.lime,text="Bull 👆",textcolor=color.white,location=location.bottom,title="BULL",offset=-1)
plotshape(bearcond,style=shape.triangledown,color=color.fuchsia,text="Bear 👇",textcolor=color.white,location=location.bottom,title="BEAR",offset=-1)
plotshape(sidecond,style=shape.circle,color=color.blue,text="Side 👉",textcolor=color.white,location=location.bottom,title="SIDE",offset=-1)

alertcondition(bearcond,title="Bear Condition",message="{{exchange}}:{{ticker}} - Bear condition detected!")
alertcondition(bullcond,title="Bull Condition",message="{{exchange}}:{{ticker}} - Bull condition detected!")
alertcondition(sidecond,title="Sideway Condition",message="{{exchange}}:{{ticker}} - Sideway condition detected!")
// End Trend Detector


MAvg=getMA(src, length)
fark=MAvg*percent*0.01
longStop = MAvg - fark
longStopPrev = nz(longStop[1], longStop)
longStop := MAvg > longStopPrev ? max(longStop, longStopPrev) : longStop
shortStop =  MAvg + fark
shortStopPrev = nz(shortStop[1], shortStop)
shortStop := MAvg < shortStopPrev ? min(shortStop, shortStopPrev) : shortStop
dir = 1
dir := nz(dir[1], dir)
dir := dir == -1 and MAvg > shortStopPrev ? 1 : dir == 1 and MAvg < longStopPrev ? -1 : dir
MT = dir==1 ? longStop: shortStop
OTT=MAvg>MT ? MT*(200+percent)/200 : MT*(200-percent)/200
plot(showsupport ? MAvg : na, color=#0585E1, linewidth=2, title="Support Line")
OTTC = highlight ? OTT[2] > OTT[3] ? color.green : color.red : #B800D9
pALL=plot(nz(OTT[2]), color=OTTC, linewidth=2, title="OTT", transp=0)

buySignalk = crossover(MAvg, OTT[2])
plotshape(buySignalk and showsignalsk ? OTT*0.995 : na, title="Buy", text="Buy🚀", location=location.absolute, style=shape.labelup, size=size.tiny, color=color.green, textcolor=color.white, transp=0)
sellSignallk = crossunder(MAvg, OTT[2])
plotshape(sellSignallk and showsignalsk ? OTT*1.005 : na, title="Sell", text="Sell⚠️", location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.red, textcolor=color.white, transp=0)
buySignalc = crossover(src, OTT[2])
plotshape(buySignalc and showsignalsc ? OTT*0.995 : na, title="Buy", text="Buy🚀", location=location.absolute, style=shape.labelup, size=size.tiny, color=color.green, textcolor=color.white, transp=0)
sellSignallc = crossunder(src, OTT[2])
plotshape(sellSignallc and showsignalsc ? OTT*1.005 : na, title="Sell", text="Sell⚠️", location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.red, textcolor=color.white, transp=0)
mPlot = plot(ohlc4, title="", style=plot.style_circles, linewidth=0,display=display.none)
longFillColor = highlighting ? (MAvg>OTT ? color.green : na) : na
shortFillColor = highlighting ? (MAvg<OTT ? color.red : na) : na
fill(mPlot, pALL, title="UpTrend Highligter", color=longFillColor)
fill(mPlot, pALL, title="DownTrend Highligter", color=shortFillColor)
buySignalr = crossover(OTT[2], OTT[3])
plotshape(buySignalr and showsignalsr ? OTT*0.995 : na, title="Buy", text="Buy🚀", location=location.absolute, style=shape.labelup, size=size.tiny, color=color.green, textcolor=color.white, transp=0)
sellSignallr = crossunder(OTT[2], OTT[3])
plotshape(sellSignallr and showsignalsr ? OTT*1.005 : na, title="Sell", text="Sell⚠️", location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.red, textcolor=color.white, transp=0)

buycond= (buySignalr[1] and showsignalsr == true) or (buySignalc[1] and showsignalsc == true) or (buySignalk[1] and showsignalsk == true)
sellcond = (sellSignallk[1] and showsignalsk == true) or (sellSignallc[1] and showsignalsc == true) or (sellSignallr[1] and showsignalsr ==true)

alertcondition(buycond, title="BUY Signal (TQ)", message="{{exchange}}:{{ticker}} - BUY Signal Detected")
alertcondition(sellcond, title="SELL Signal (TQ)", message="{{exchange}}:{{ticker}} - SELL Signal Detected")

//TQ: Grid Alerting system.  The Trend must be bullish or sideways.  Intended to be used to open a grid.  We do not take sells here since any sell signal should shut down the grid

// chart when something with a buy on it enters a bull market.  Need to adapt this to buy on sideways markets, but need to work on conditional nature of sidecond first (which says gridbuy not true)
gridbuy= (bullcond ==true) or (sidecond ==true) and (buycond ==true)
plotshape(gridbuy, style=shape.cross, title="Grid Start", text="Grid Start")
alertcondition(gridbuy, title="Grid Buy", message=" ")

//chart when a grid buy enters a bear market, which is where you do NOT want a grid running.  This script will not ever start in any sort of bear market condition, even if the bot issues a buy in the bear (Which is what we want - we want to catch spikes for buys, but grids are less concerned.)
// This will stop the grid on EITHER a bear market starting or the DCA bot issing a sell.  Basically we want to be extra careful to not keep the grid running in any sort of downward trend.  This should catch both.  Because of this you'll see more grid sells than grid buys, which is ok.  It doesn't matter if we try to stop a grid both that is already stopped.
gridsell= (bearcond ==true) or (sellcond==true)
plotshape(gridsell, style=shape.xcross, title="Grid Stop", text="Grid Stop")
